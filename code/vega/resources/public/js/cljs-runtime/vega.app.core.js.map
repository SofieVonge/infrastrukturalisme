{"version":3,"sources":["vega/app/core.cljs"],"mappings":";AAQA,AACEA,AAAS;AAEX,AAAA,AAAMC,AAAcC;AAApB,AAAA;AAEE,AAAQC,AAAQD;;AAElB,AAAA,AAAME,AACHC,AAAKC;AADR,AAAA;AAGE,AAAA,AAACC,AAAQF,AAAsBC;;AAEjC,AAAKE,AAED,AAACP,AAAaD,AACd,AAAA,AAACI;AAEL,AAAKK,AACH,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAOE;AAAP,AAAgB,AAAAF,AAAA;AAAhB,AAAAC;AAAA,AAA4B,AAAAA,AAAA;AAA5B;AAEF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKE;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAMC,AACHC,AAAUC,AAAWC;AADxB,AAAA;AAGE,AAAI,AAAK,AAACC,AAASX,AAAMS,AAAY,AAACE,AAASX,AAAMU;AACpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAASJ,AAAyC,AAAA,AAAKC,AAAkC,AAAA,AAAKC;;AADhG;;;AAKF,AAAA,AAAMG,AACHL,AAAUM;AADb,AAAA;AAGE,AAAI,AAAA,AAAMA;AACR,AAAMC,AAAK,AAAA,AAAQD;AAAnB,AACC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACF,AAASJ,AAAyC,AAAA,AAAKO;;AAF3D;;;AAeF,AAAA,AAAMC;AAAN,AAAA;;AAIA,AAAA,AAAMC;AAAN,AAAA;;AAGA,AAAA,AAAMC,AACHV,AAAUW;AADb,AAAA;AAGE,AAAI,AAACC,AAAUf,AAAac;AAC1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACP,AAASJ,AAAsCW;;AADlD;;;AAKF,AAAA,AAAME,AACHb,AAAUc;AADb,AAAA;AAGE,AAAI,AAACF,AAAUd,AAAcgB;AAC3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACV,AAASJ,AAAoDc;;AADhE;;;AAMF,AAAKC,AACH,AAAA,AAACV,AAAkBd;AAGrB,AAAA,AAAMyB;AAAN,AACE,AAAA,AAACC,AAAwBF;;AAD3B,AAAA,AAAA,AAAA,AAEGG,AAAQH;;AAGX,AAAKI,AACH,AAAA,AAACC;AAEH,AAAA,AAAuBC;AAAvB,AACE,AAAA,AAACC,AAAUN,AAAKG;;AAGlB,AAAA,AAAMI;AAAN,AACE,AAACF","names":["vega.app.core/timeline","vega.app.core/string->json","string","js/JSON","vega.app.core/json->spec","json","keywordize-keys?","cljs.core.js__GT_clj","vega.app.core/spec","vega.app.core/year?","cljs.spec.alpha/and-spec-impl","p1__43869#","p1__43870#","cljs.core/number?","vega.app.core/valid-colors","vega.app.core/valid-symbols","vega.app.core/change-range","vega-spec","start-year","end-year","cljs.spec.alpha.valid_QMARK_","cljs.core/assoc-in","vega.app.core/change-range-step","step","year","vega.app.core/change-dataset","vega.app.core/change-height","vega.app.core/change-color","scheme","cljs.core/contains?","vega.app.core/change-symbol","symbol","vega.app.core/new-spec","vega.app.core/app","js/console.log","oz.core/vega","vega.app.core/root","js/document.getElementById","vega.app.core/render","reagent.dom.render","vega.app.core/init"],"sourcesContent":["(ns vega.app.core\r\n  (:require [reagent.dom :as d]\r\n            [reagent.core :as r]\r\n            [shadow.resource :as resource]\r\n            [clojure.spec.alpha :as s]\r\n            [oz.core :as oz]))\r\n\r\n\r\n(def\r\n  timeline (resource/inline \"spec/timeline.json\"))\r\n\r\n(defn string->json [string]\r\n  \"Turning a string into JS JSON format\"\r\n  (.parse js/JSON string))\r\n\r\n(defn json->spec\r\n  [json keywordize-keys?]\r\n  \"Turning a JS JSON format into a map, keywordize keys true or false\"\r\n  (js->clj json :keywordize-keys keywordize-keys?))\r\n\r\n(def spec\r\n  (->\r\n    (string->json timeline)\r\n    (json->spec true)))\r\n\r\n(def year?\r\n  (s/and number? #(> % 1880) #(< % 2020)))\r\n\r\n(def valid-colors #{\"accent\" \"category10\" \"category20\" \"category20b\" \"category20c\" \"dark2\" \"paired\" \"pastel1\" \"pastel2\" \"set1\" \"set2\" \"set3\" \"tableau10\" \"tableau20\"})\r\n\r\n(def valid-symbols #{\"circle\" \"square\" \"cross\" \"diamond\" \"triangle-up\" \"triangle-down\" \"triangle-right\" \"triangle-left\" \"stroke\" \"arrow\" \"wedge\" \"triangle\"})\r\n\r\n(defn change-range\r\n  [vega-spec start-year end-year]\r\n  \"Changing the range start and end year\"\r\n  (if (and (s/valid? year? start-year) (s/valid? year? end-year))\r\n   (assoc-in vega-spec [:data 1 :values] [{:initRange (str start-year \"-01-01\")} {:initRange (str end-year \"-01-01\")}])))\r\n  ;; (throw \"some kind of error handling here\")) ; for when start and end are not a valid year according to year?\r\n\r\n\r\n(defn change-range-step\r\n  [vega-spec step]\r\n  \"Changing the step of range\"\r\n  (if (pos? step)\r\n    (let [year (+ 1930 step)]\r\n     (assoc-in vega-spec [:data 1 :values 1 :initRange] (str year \"-01-01\")))))\r\n  ;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n#_(defn filter-data\r\n    [vega-spec column-name & values]\r\n    \"Filter the data to only show the values\"\r\n    (let [expr {:type \"filter\" :expr (str \"datum.\" column-name \" === '\" (first values) \"'\")}]\r\n      (map values\r\n           (apply str \"|| datum.\" column-name \" === '\" (next values) \"'\"))\r\n     ((assoc-in vega-spec [:data 0 :transform 1] expr))))\r\n\r\n\r\n(defn change-dataset\r\n  [])\r\n;; skal skrive noget om hvad et dataset SKAL indeholde for at virke, m\u00e5ske clojurespec til hj\u00e6lp?\r\n\r\n(defn change-height\r\n  [])\r\n\r\n(defn change-color\r\n  [vega-spec scheme]\r\n  \"Changing the color of the legend based on a vega scheme\"\r\n  (if (contains? valid-colors scheme)\r\n    (assoc-in vega-spec [:scales 2 :range] {:scheme scheme})))\r\n    ;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n(defn change-symbol\r\n  [vega-spec symbol]\r\n  \"Changing the shape of the symbol\"\r\n  (if (contains? valid-symbols symbol)\r\n    (assoc-in vega-spec [:marks 2 :encode :update :shape] {:value symbol})))\r\n;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n\r\n(def new-spec\r\n  (change-range-step spec 2))\r\n\r\n\r\n(defn app []\r\n  (js/console.log \"Spec: \" new-spec)\r\n  [oz/vega new-spec {:mode \"vega\"}])\r\n\r\n\r\n(def root\r\n  (js/document.getElementById \"app\"))\r\n\r\n(defn ^:dev/after-load render []\r\n  (d/render [app] root))\r\n\r\n\r\n(defn init []\r\n  (render))\r\n"]}